---Design HashSet---
Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.

--SOLUTION--

public class MyHashSet {
    private const int bucketSize= 1000;
    private LinkedList<int>[] buckets;

    public MyHashSet() {
        buckets= new LinkedList<int>[bucketSize];
    }

    private int hashFunction(int key){
        return key%bucketSize;
    }
    
    public void Add(int key) {
        int index= hashFunction(key);
        if(buckets[index]==null){
            buckets[index]= new LinkedList<int>();
        }

        if(!Contains(key)){
            buckets[index].AddLast(key);
        }

    }
    
    public void Remove(int key) {
        int index= hashFunction(key);
        LinkedList<int> bucket= buckets[index];
        if(bucket!=null){
            bucket.Remove(key);
        }
    }
    
    public bool Contains(int key) {
        int index= hashFunction(key);
        LinkedList<int> bucket= buckets[index];
        if(bucket!=null){
            foreach(int value in bucket){
                if(value==key){
                    return true;
                }
            }
        }
        return false;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.Add(key);
 * obj.Remove(key);
 * bool param_3 = obj.Contains(key);
 */
