Find Eventual Safe States - BFS (Topological Sort)
-------------------------------------
There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].
A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).
Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.
-------------------------------------
public class Solution {
    public IList<int> EventualSafeNodes(int[][] graph) {
        var queue = new Queue<int>();
        var dict = new Dictionary<int, HashSet<int>>();
        var res = new List<int>();
        var degree = new int[graph.Length];

        for(var i = 0; i < graph.Length; i++){          
            foreach(var g in graph[i]){
                if(!dict.ContainsKey(g))
                    dict.Add(g, new HashSet<int>());
                dict[g].Add(i);
            }
            degree[i] += graph[i].Length; 
            if(degree[i] == 0)
                queue.Enqueue(i);
        }
       
        while(queue.Count > 0){
            var cur = queue.Dequeue();
            res.Add(cur);
            if(!dict.ContainsKey(cur)) continue;
            foreach(var item in dict[cur]){
                degree[item]--;
                if(degree[item] == 0)
                    queue.Enqueue(item);        
            }
        }
        res.Sort();
        return res;      
    }
}